// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/Adder16.hdl

/**
 * Adds two 16-bit values.
 * The most significant carry bit is ignored.
 */

CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
   // Tam-CO's code here:
   HalfAdder(a=a[0], b=b[0], sum=out[0], carry=carry0);
   FullAdder(a=a[1], b=b[1], c=carry0, sum=out[1], carry=carry1);
   FullAdder(a=a[2], b=b[2], c=carry1, sum=out[2], carry=carry2);
   FullAdder(a=a[3], b=b[3], c=carry2, sum=out[3], carry=carry3);
   FullAdder(a=a[4], b=b[4], c=carry3, sum=out[4], carry=carry4);
   FullAdder(a=a[5], b=b[5], c=carry4, sum=out[5], carry=carry5);
   FullAdder(a=a[6], b=b[6], c=carry5, sum=out[6], carry=carry6);
   FullAdder(a=a[7], b=b[7], c=carry6, sum=out[7], carry=carry7);
   FullAdder(a=a[8], b=b[8], c=carry7, sum=out[8], carry=carry8);
   FullAdder(a=a[9], b=b[9], c=carry8, sum=out[9], carry=carry9);
   FullAdder(a=a[10], b=b[10], c=carry9, sum=out[10], carry=carry10);
   FullAdder(a=a[11], b=b[11], c=carry10, sum=out[11], carry=carry11);
   FullAdder(a=a[12], b=b[12], c=carry11, sum=out[12], carry=carry12);
   FullAdder(a=a[13], b=b[13], c=carry12, sum=out[13], carry=carry13);
   FullAdder(a=a[14], b=b[14], c=carry13, sum=out[14], carry=carry14);
   FullAdder(a=a[15], b=b[15], c=carry14, sum=out[15]);
}

// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
	Not16(in=x,out=notX);
	Not16(in=y,out=notY);
	Add16(a=notX,b=true,out=X1);	//This operation does X+1 = X1
	Not16(in=X1,out=notX1);			//This operation does X-1 = notX1
	Add16(a=notY,b=true,out=Y1);	//This operation does Y+1 = Y1
	Not16(in=Y1,out=notY1);			//This operation does Y-1 = notY1
	Add16(a=x,b=y,out=xPy);			//This operation does X+Y = xPy
	Inc16(in=notY, out=negY);		//This operation does -Y = negY
	Inc16(in=notX, out=negX);		//This operation does -X = negX
	Add16(a=x, b=negX, out=xMy);	//This operation does X-Y = xMy
	Add16(a=negX, b=y, out=yMx);	//This operation does Y-X = yMx
	Or16(a=x, b=y, out=xORy);		//This operation does X|Y = xORy
	And16(a=x, b=y, out=xANDy);		//This operation does X&Y = xANDy
	
	Mux4Way16(a=setC, b=setD, c=setA, d=setB, sel[0]=f,sel[1]=no,out=out);
	
	//The following multiplexer is built to perform the following ops 
	// X, Y, X&Y	
	Mux4Way16(a=xANDy, b=x, c=y, sel[0]=ny, sel[1]=zx, out=setC);

	//The following multiplexer are built to perform the following ops
	// !X, !Y, X|Y
	Mux4Way16(a=notX, b=xORy, d=notY, sel[0]=zx, sel[1]=nx, out=setD);
	
	//The following 3 multiplexers are built to perform the following ops
	// 0 , -1, X-1, Y-1, X+Y
	Mux16(a=xPy, b=notY1, sel=zx, out=seta2);
	Mux4Way16(a=notX1, c=false, d=true, sel[0]=zx, sel[1]=nx, out=seta1);
	Mux16(a=seta2, b=seta1, sel=zy, out=setA);
	
	//The following 3 multiplexers are built to perform the following ops
	// 1, -X, -Y, X+1, Y+1, X-Y, Y-X
	Mux4Way16(a=xMy, c=negY, d=Y1, sel[0]=zx, sel[1]=ny, out=setb1);
	Mux16(a=xPy, b[0]=true,b[1..15]=false, sel=zx, out=setb2);
	Mux4Way16(a=yMx, b=negX, c=setb1, d=setb2, sel[0]=nx, sel[1]=zy, out=setB);
	
	// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Tam-CO's code here:
   Mux16(a=x, b=false, sel=zx, out=xAfterZero);
   Not16(in=xAfterZero, out=negateX);
   Mux16(a=xAfterZero, b=negateX, sel=nx, out=xAfterNegate);
   
   Mux16(a=y, b=false, sel=zy, out=yAfterZero);
   Not16(in=yAfterZero, out=negateY);
   Mux16(a=yAfterZero, b=negateY, sel=ny, out=yAfterNegate);
   
   And16(a=xAfterNegate, b=yAfterNegate, out=andXY);
   Add16(a=xAfterNegate, b=yAfterNegate, out=sumXY);
   
   Mux16(a=andXY, b=sumXY, sel=f, out=tempOut);
   Not16(in=tempOut, out=negateOut);
   
   Mux16(a=tempOut, b=negateOut, sel=no, out=out, out[0..7]=firstHalfOut, out[8..15]=lastHalfOut, out[15]=ng);
   Or8Way(in=firstHalfOut, out=or1);
   Or8Way(in=lastHalfOut, out=or2);
   Or(a=or1, b=or2, out=notZr);
   Not(in=notZr, out=zr);
}